/**
一、基本概念
每个结点最多有两棵子树，左子树和右子树，次序不可以颠倒。
性质：
1、非空二叉树的第n层上至多有2^(n-1)个元素。
2、深度为h的二叉树至多有2^h-1个结点。
3、对任何一棵二叉树T，如果其终端结点数(即叶子结点数)为n0，度为2的结点数为n2，则n0 = n2 + 1。
满二叉树：所有终端都在同一层次，且非终端结点的度数为2。
在满二叉树中若其深度为h，则其所包含的结点数必为2^h-1。
完全二叉树：除了最大的层次即成为一颗满二叉树且层次最大那层所有的结点均向左靠齐，即集中在左面的位置上，不能有空位置。
对于完全二叉树，设一个结点为i则其父节点为i/2，2i为左子节点，2i+1为右子节点。
二、二叉树的遍历
遍历二叉树的所有结点且仅访问一次。按照根节点位置的不同分为前序遍历，中序遍历，后序遍历。
前序遍历：根节点->左子树->右子树（根节点在前面）
中序遍历：左子树->根节点->右子树（根节点在中间）
后序遍历：左子树->右子树->根节点（根节点在后边）
**/
import java.util.Stack;
import java.util.ArrayList;
public class BinaryTree{
	public static void main(String[] args){
		int[] pre={1,2,4,7,3,5,6,8};
		int[] in={4,7,2,1,5,3,8,6};
		TreeNode treeNode=new TreeNode(0);
		BinaryTree binaryTree=new BinaryTree();
		treeNode=binaryTree.CreateBinaryTree(pre,in);
		binaryTree.preOrder(treeNode);
		binaryTree.inOrder(treeNode);
		binaryTree.postOrder(treeNode);
		binaryTree.preOrderF(treeNode);
		binaryTree.inOrderF(treeNode);
		binaryTree.postOrderF(treeNode);
	}
	public TreeNode CreateBinaryTree(int[] pre,int[] in){
		if(pre.length<=0||in.length<=0||pre.length!=in.length)
			return null;
		else
			return ConstructTree(pre,in,0,pre.length-1,0,in.length-1);
	}
	public TreeNode ConstructTree(int[] pre,int[] in,int preStart,int preEnd,int inStart,int inEnd){
		int rootValue=pre[preStart];
		TreeNode root=new TreeNode(rootValue);
		root.left=null;
		root.right=null;
		if(preStart==preEnd){
			if(inStart==inEnd&&pre[preStart]==in[inStart]){
				return root;
			}
			else
				return null;
		}
		int findInRoot=inStart;
		while(findInRoot<=inEnd&&in[findInRoot]!=rootValue){
			findInRoot++;
		}
		if(findInRoot>inEnd){
			return null;
		}
		int leftLength=findInRoot-inStart;
		int preLeftEnd=preStart+leftLength;
		if(leftLength>0){
			root.left=ConstructTree(pre,in,preStart+1,preLeftEnd,inStart,findInRoot-1);
		}
		if(leftLength<preEnd-preStart){
			root.right=ConstructTree(pre,in,preLeftEnd+1,preEnd,findInRoot+1,inEnd);
		}
		return root;
	}
	public void preOrder(TreeNode root){//前序遍历递归
		if(root!=null){
			System.out.print(root.val+" ");
			preOrder(root.left);
			preOrder(root.right);
		}
	}
	public void inOrder(TreeNode root){//中序遍历递归
		if(root!=null){
			inOrder(root.left);
			System.out.print(root.val+" ");
			inOrder(root.right);
		}
	}
	public void postOrder(TreeNode root){//后序遍历递归
		if(root!=null){
			postOrder(root.left);
			postOrder(root.right);
			System.out.print(root.val+" ");
		}
	}
	public void preOrderF(TreeNode root){//非递归先序遍历
		if(root==null)
			return;
		Stack<TreeNode> stack=new Stack<TreeNode>();
		stack.push(root);
		TreeNode treeNode=null;
		while(!stack.isEmpty()){
			treeNode=stack.pop();
			System.out.print(treeNode.val+" ");
			if(treeNode.right!=null){
				stack.push(treeNode.right);
			}
			if(treeNode.left!=null){
				stack.push(treeNode.left);
			}
		}
	}
	public void inOrderF(TreeNode root){//非递归中序遍历
		if(root==null)
			return;
		Stack<TreeNode> stack=new Stack<TreeNode>();
		TreeNode treeNode=root;
		while(!stack.isEmpty()||treeNode!=null){
			if(treeNode!=null){
				stack.push(treeNode);
				treeNode=treeNode.left;
			}
			else{
				treeNode=stack.pop();
				System.out.print(treeNode.val+" ");
				treeNode=treeNode.right;
			}
		}
	}
	public void postOrderF(TreeNode root){//非递归后序遍历,参考非递归前序遍历，后序遍历是左->右->根，先根据根->右->左遍历，然后使用ArrayList进行反转即可。
		if(root==null)
			return ;
		Stack<TreeNode> stack=new Stack<TreeNode>();
		ArrayList<Integer> lrs=new ArrayList<Integer>();
		TreeNode treeNode=root;
		stack.push(root);
		while(!stack.isEmpty()){
			treeNode=stack.pop();
			lrs.add(treeNode.val);
			if(treeNode.left!=null){
				stack.push(treeNode.left);
			}
			if(treeNode.right!=null){
				stack.push(treeNode.right);
			}
		}
		for(int i=lrs.size()-1;i>=0;i--){
			System.out.print(lrs.get(i)+" ");
		}
	}
}		
