/**问题描述
*输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，
*序列4，5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）
**/
/**解决方法
*如果下一个弹出的数字刚好是栈顶元素，那么直接弹出；如果下一个弹出的数字不在栈顶，则把压栈序列中还没有入栈的数字压入辅助栈，直到把下一个需要弹出的数字压
*入栈中为止；如果所有的数字都压入栈后仍然没有找到下一个弹出的数字，那么该序列不可能是一个弹出序列。
**/
import java.util.ArrayList;
import java.util.Stack;
public class Solution {
    public boolean IsPopOrder(int [] pushA,int [] popA) {
      boolean isOrder=false;
        if(pushA.length>0&&popA.length>0){
            Stack<Integer> stack=new Stack<Integer>();
            int index_push=0;
            int index_pop=0;
            while(index_pop<popA.length){
                while(stack.size()==0||stack.peek()!=popA[index_pop]){
                    if(index_push==pushA.length)
                        break;
                    stack.push(pushA[index_push++]);
                }
                if(stack.peek()!=popA[index_pop])
                    break;
                stack.pop();
                index_pop++;
            }
            if(stack.size()==0&&index_pop==popA.length){
                isOrder=true;
            }
        }
        return isOrder;
    }
}
