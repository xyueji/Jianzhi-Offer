/**问题描述
*从上往下打印出二叉树的每个节点，同层节点从左至右打印。
**/
/**解决方法
*每次打印一个节点的时候，如果该节点有子节点，则把该节点的子节点放到一个队列的末尾。接下来取出队列的头结点作为当前节点，重复上述过程，直至队列为空。
*注意：判断root为空的情况，若判断在lrs申明之前将出现空指针异常。
**/
import java.util.ArrayList;
import java.util.Queue;
import java.util.LinkedList;
/**
public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;

    public TreeNode(int val) {
        this.val = val;

    }

}
*/
public class Solution {
    public ArrayList<Integer> PrintFromTopToBottom(TreeNode root) {
        Queue<TreeNode> queue=new LinkedList<TreeNode>();
        ArrayList<Integer> lrs=new ArrayList<Integer>();
        if(root==null)
            return lrs;
        queue.offer(root);
        while(!queue.isEmpty()){
            TreeNode tNode=queue.poll();
            lrs.add(tNode.val);
            if(tNode.left!=null){
                queue.offer(tNode.left);
            }
            if(tNode.right!=null){
                queue.offer(tNode.right);
            }
        }
        return lrs;
    }
}
